dados <- read_excel("C:\Users\JoaoS\Documents\lista 8\base_de_dados.xlsx")
# Importar a primeira planilha
dados <- read_excel("C:/Users/JoaoS/Documents/lista 8/base_de_dados.xlsx")
# Ver os dados
View(dados)
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
View(base_de_dados)
library(dplyr)
require(dplyr)
require(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse[")
install.packages("tidyverse")
require(tidyverse)
require(dplyr)
#Código executado pelo 'import dataset'
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
library(dplyr)
variaveis <- Indice %>%
select(id, Municipio, Pontuação, UF, população2019, contains("ODS"))
#Código executado pelo 'import dataset'
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
library(dplyr)
variaveis <- base_de_dados %>%
select(id, Municipio, Pontuação, UF, população2019, contains("ODS"))
#Código executado pelo 'import dataset'
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
library(dplyr)
variaveis <- base_de_dados %>%
select(id, Munícipio, Pontuação, UF, população2019, contains("ODS"))
#Código executado pelo 'import dataset'
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
library(dplyr)
variaveis <- base_de_dados %>%
select(id, Município, Pontuação, UF, população2019, contains("ODS"))
#Código executado pelo 'import dataset'
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
library(dplyr)
variaveis <- base_de_dados %>%
select(id, Município, Pontuação, UF, população_2019, contains("ODS"))
#Código executado pelo 'import dataset'
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
library(dplyr)
variaveis <- base_de_dados %>%
select(id, Município, Pontuação, UF, População_2019, contains("ODS"))
view(variaveis)
View(dados)
variaveis_sem_regional <- variaveis %>%
select(-contains("regional"))
view(variaveis_sem_regional)
#utilizando a função filter
dados_mg <- variaveis_sem_regional %>%
filter(UF == "Minas Gerais")
view(dados_mg)
#utilizando a função filter
dados_mg <- filter(data = variaveis_sem_regional,   UF == "Minas Gerais")
#Código executado pelo 'import dataset'
library(readxl)
base_de_dados <- read_excel("lista 8/base_de_dados.xlsx",
sheet = "Indice")
#Selecionando as variáveis pedidas na questão
library(dplyr)
variaveis <- base_de_dados %>%
select(id, Município, Pontuação, UF, População_2019, contains("ODS"))
#Filtrando o banco com "-contains()" ,
#"-" significa remover o elemento passado no argumento
variaveis_sem_regional <- variaveis %>%
select(-contains("regional"))
#utilizando a função filter
dados_mg <- filter(data = variaveis_sem_regional, UF == "Minas Gerais")
view(variaveis_sem_regional)
#utilizando a função filter
dados_mg <- filter(data = variaveis_sem_regional, UF == "Minas Gerais")
#utilizando a função filter
dados_mg <- filter(data = variaveis_sem_regional, UF = "Minas Gerais")
#utilizando a função filter
dados_mg <- filter(data = variaveis_sem_regional, UF == "MG")
#utilizando a função filter
dados_mg <- filter(variaveis_sem_regional, UF == "MG")
view(dados_mg)
# Questão 04
#acrescentando a nova coluna -- utilizando a função mutate
nova_coluna <- mutate(variaveis, soma_ODS = (Pontuação ODS1 + Pontuação ODS2 + Pontuação ODS3))
# Questão 04
#acrescentando a nova coluna -- utilizando a função mutate
nova_coluna <- mutate(variaveis, soma_ODS = Pontuação ODS1 + Pontuação ODS2 + Pontuação ODS3)
# Questão 04
#acrescentando a nova coluna -- utilizando a função mutate
nova_coluna <- mutate(variaveis, soma_ODS = Pontuação_ODS1 + Pontuação_ODS2 + Pontuação_ODS3)
variaveis %>%
mutate(variaveis, soma_ODS = Pontuação ODS1 + Pontuação ODS2 + Pontuação ODS3)
# Questão 04
#acrescentando a nova coluna -- utilizando a função mutate
variaveis %>%
mutate(variaveis, soma_ODS = Pontuação ODS1 + Pontuação ODS2 + Pontuação ODS3)
# Questão 04
#acrescentando a nova coluna -- utilizando a função mutate
variaveis %>%
mutate(variaveis, soma_ODS = 'Pontuação ODS1' + 'Pontuação ODS2' + 'Pontuação ODS3')
#Renomeando as colunas para evitar um erro:
variaveis %>%
mutate(soma_ODS = `Pontuação ODS1` + `Pontuação ODS2` + `Pontuação ODS3`)
view(variaveis$soma_ODS)
#Renomeando as colunas para evitar um erro:
dados_mg %>%
mutate(soma_ODS = `Pontuação ODS1` + `Pontuação ODS2` + `Pontuação ODS3`)
#Renomeando as colunas para evitar um erro:
dados_mg %>%
mutate(soma_ODS = Pontuação ODS1 + Pontuação ODS2 + Pontuação ODS3)
#Renomeando as colunas para evitar um erro:
dados_mg %>%
mutate(soma_ODS = "Pontuação ODS1" + "Pontuação ODS2" + "Pontuação ODS3")
#Renomeando as colunas para evitar um erro:
dados_mg %>%
mutate(soma_ODS = 'Pontuação ODS1' + 'Pontuação ODS2' + 'Pontuação ODS3')
#Renomeando as colunas para evitar um erro:
dados_mg %>%
mutate(soma_ODS = `Pontuação ODS1` + `Pontuação ODS2` + `Pontuação ODS3`)
view(dados_mg)
#Renomeando as colunas para evitar um erro:
variaveis_com_somaods<- variaveis %>%
mutate(soma_ODS = `Pontuação ODS1` + `Pontuação ODS2` + `Pontuação ODS3`)
view(variaveis_com_somaods)
view(dados_mg)
clear
getwd()
setwd()
setwd("C:/Users/JoaoS/Documents/trabalhofinal_cd")
getwd()
# Carregando os dados
bancoBR23 <- read.csv("stateofdata_2023.csv")
bancoBR24 <-read.csv("stateofdata_2024.csv")
bancoGringo <- read.csv("data_science_salaries.csv")
# Carregando os pacotes necessários
library(dplyr)
library(stringr)
# Excluindo informações não relevantes do banco estrangeiro
bancoGringo <- bancoGringo %>%
select(-salary, -salary_currency)
# Renomeando as colunas do banco de dados estrangeiro
names(bancoGringo) <- c("cargo", "nivel_de_experiencia", "tipo_de_contrato", "modelo_de_trabalho",
"data_da_resposta", "local_de_residencia", "salario_usdt",
"local_da_empresa", "tamanho_da_empresa")
# Filtrando o banco de dados estrangeiro somente para datas compatíveis com os demais bancos
bancoGringo <- bancoGringo %>% filter(data_da_resposta == 2023 | data_da_resposta == 2024)
# Adicionando uma coluna com a data da resposta nos dois bancos de dados brasileiros
bancoBR23$Data_da_resposta <- 2023
bancoBR24$Data_da_resposta <- 2024
#Adiconando uma coluna com o local de residência e da empresa (para essa análise, em termos de países)
bancoBR23$local_da_empresa <- "Brasil"
bancoBR23$local_de_residencia <- "Brasil"
bancoBR24$local_da_empresa <- "Brasil"
bancoBR24$local_de_residencia <- "Brasil"
# Criando novos bancos de dados com somente os dados de interesse (para os bancos nacionais)
bancoBR23 <- bancoBR23 %>%
select(, c(23, 32,30,37,36,35, 55,400, 401, 402))
bancoBR24 <- bancoBR24 %>%
select(, c(29, 36, 39, 34, 40, 41, 48, 404, 405, 406))
# Renomeando as colunas do banco de dados BR de 2023
names(bancoBR23)<- c("Estado_onde_vive", "tamanho_da_empresa", "tipo_de_contrato", "salario_brl",
"nivel_de_experiencia", "cargo","trabalho_remoto_flexivel", "data_da_resposta",
"local_da_empresa", "local_de_residencia")
# Renomeando as colunas do banco de dados BR de 2024
names(bancoBR24)<- c("Estado_onde_vive","tamanho_da_empresa", "cargo", "tipo_de_contrato", "nivel_de_experiencia",
"salario_brl", "trabalho_remoto_flexivel", "data_da_resposta", "local_da_empresa",
"local_de_residencia")
# Convertendo os salários:
#Criando objetos para armazenar os valores
media_salarial23 <- bancoBR23 %>%
select(4)
media_salarial24 <- bancoBR24 %>%
select(6)
# Pegando o ponto médio de cada intervalo
media_salarial23 <- media_salarial23 %>%
mutate(salario_brl = case_when(
str_detect(salario_brl, "Menos de") ~ 1000 / 2,
str_detect(salario_brl, "de R\\$") ~ {
numeros <- str_extract_all(salario_brl, "\\d{1,3}(\\.\\d{3})*")
valores <- lapply(numeros, function(x) as.numeric(gsub("\\.", "", x)))
sapply(valores, function(x) x[1] + (x[2] - x[1]) / 2)
},
TRUE ~ NA_real_
))
media_salarial24 <- media_salarial24 %>%
mutate(salario_brl = case_when(
str_detect(salario_brl, "Menos de") ~ 1000 / 2,
str_detect(salario_brl, "de R\\$") ~ {
numeros <- str_extract_all(salario_brl, "\\d{1,3}(\\.\\d{3})*")
valores <- lapply(numeros, function(x) as.numeric(gsub("\\.", "", x)))
sapply(valores, function(x) x[1] + (x[2] - x[1]) / 2)
},
TRUE ~ NA_real_
))
#Fazendo a renda anual
media_salarial23 <- media_salarial23 %>%
mutate(renda_anual_brl = salario_brl * 12) %>%
select(-salario_brl)
media_salarial24 <- media_salarial24 %>%
mutate(renda_anual_brl = salario_brl * 12) %>%
select(-salario_brl)
#Convertendo esses valores baseado na média da cotação do dólar nos respectivos anos
media_salarial23 <- media_salarial23 %>%
mutate(renda_anual_usd = renda_anual_brl / 4.99)
media_salarial24 <- media_salarial24 %>%
mutate(renda_anual_usd = renda_anual_brl / 5.57)
#Unindo os dois bancos de dados brasileiros
bancoBR <- rbind(bancoBR23, bancoBR24)
# Adicionando os valores de salários
salarios <- rbind(media_salarial23, media_salarial24)
bancoBR <- cbind(bancoBR, salarios)
# Tratando valores vazios
bancoBR[bancoBR == ''] <- NA
# Cálculo do salário médio por estado
salario_estado <- bancoBR %>%
group_by(Estado_onde_vive) %>%
summarise(media_salarial = mean(renda_anual_brl, na.rm = TRUE))
# Formatando os valores para Estado
bancoBR <- bancoBR %>%
mutate(Estado_onde_vive = str_trim(str_remove(Estado_onde_vive, "\\s*\\(.*\\)")))
#Carregando pacotes necessários
library(ggplot2)
# Importando os bancos de dados do módulo de normalização dos bancos
source("normalizacao_bancodedados.R")
# Análise 1 - salários por nível de experiência -- banco Gringo
ggplot(data = bancoGringo, mapping = aes(x = nivel_de_experiencia, y = salario_usdt)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Distribuição de salários por nível de experiência no exterior",
x = "Níveis de experiência",
y = "Salário anual ($)") +
theme_bw() +
scale_y_continuous(labels = comma)  # <- esta linha altera o formato do eixo y
# Análise 1 - salários por nível de experiência -- banco Gringo
ggplot(data = bancoGringo, mapping = aes(x = nivel_de_experiencia, y = salario_usdt)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Distribuição de salários por nível de experiência no exterior",
x = "Níveis de experiência",
y = "Salário anual ($)") +
theme_bw() +
scale_y_continuous(labels = function(x) format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE))
# Análise 2 - salários por nível de experiência -- banco BR
ggplot(data = bancoBR, mapping = aes(x = nivel_de_experiencia, y = renda_anual_usd))+
geom_boxplot(fill = "blue") +
labs(title = "Distribuição de salários por nível de experiência no Brasil",
x = "Níveis de experiências",
y = "Salário anual ($)") +
theme_bw()
# Análise 2 - salários por nível de experiência -- banco BR
ggplot(data = bancoBR, mapping = aes(x = nivel_de_experiencia, y = renda_anual_usd))+
geom_boxplot(fill = "blue") +
labs(title = "Distribuição de salários por nível de experiência no Brasil",
x = "Níveis de experiências",
y = "Salário anual ($)") +
theme_bw()+
scale_y_continuous(labels = function(x) format(x, big.mark = ".", decimal.mark = ",", scientific = FALSE))
dados$experiencia <- factor(dados$experiencia,
levels = c("Entry-level", "Mid-level", "Senior-level", "Executive-level")) #Organiza os níveis dos cargos
bancoGringo$nivel_de_experiencia <- factor(bancoGringo$nivel_de_experiencia,
levels = c("Entry-level", "Mid-level", "Senior-level", "Executive-level")) #Organiza os níveis dos cargos
ggplot(data = bancoGringo, mapping = aes(x = nivel_de_experiencia, y = salario_usdt)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Distribuição de salários por nível de experiência no exterior",
x = "Níveis de experiência",
y = "Salário anual ($)") +
theme_bw()
# Análise 2 - salários por nível de experiência -- banco BR
ggplot(data = bancoBR, mapping = aes(x = nivel_de_experiencia, y = renda_anual_usd))+
geom_boxplot(fill = "blue") +
labs(title = "Distribuição de salários por nível de experiência no Brasil",
x = "Níveis de experiências",
y = "Salário anual ($)") +
theme_bw()
# Análise 1 - salários por nível de experiência -- banco Gringo
bancoGringo$nivel_de_experiencia <- factor(bancoGringo$nivel_de_experiencia,
levels = c("Entry-level", "Mid-level", "Senior-level", "Executive-level")) #Organiza os níveis dos cargos
ggplot(data = bancoGringo, mapping = aes(x = nivel_de_experiencia, y = salario_usdt)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Distribuição de salários por nível de experiência no exterior",
x = "Níveis de experiência",
y = "Salário anual ($)") +
theme_bw()
# Análise 3 - Mapa da distribuição dos salários no Brasil
library(geobr)
mapa_estados <- read_state(year = 2020)
#Calculando a média salarial
salario_estado <- bancoBR %>%
group_by(Estado_onde_vive) %>%
summarise(media_salarial = mean(renda_anual_brl, na.rm = TRUE)) %>%
ungroup()
# Verificando se os nomes batem antes de juntar
mapa_estado_salario <- mapa_estados %>%
left_join(salario_estado, by = c("name_state" = "Estado_onde_vive"))
# Fazendo o join com base nos nomes dos estados
mapa_salario <- mapa_estados %>%
left_join(salario_estado, by = c("name_state" = "Estado_onde_vive"))
ggplot(data = mapa_salario) +
geom_sf(aes(fill = media_salarial), color = "grey") +
scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Salário médio (BRL)") +
theme_minimal() +
labs(title = "Mapa de calor do salário médio por estado no Brasil") +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
tabela <- table(bancoGringo$cargo , bancoGringo$salario_usdt)
View(tabela)
teste <- as.data.frame(tabela)
View(teste)
tabela <- table(bancoBR$cargo, bancoBR$salario_brl)
View(tabela)
tabela <- na.omit(table(bancoBR$cargo, bancoBR$salario_brl))
View(tabela)
tabela_tratada <- tabela[, colSums(tabela$Freq) > 0, ]
tabela_tratada <- tabela[, colSums(tabela) > 0, ]
tabela_tratada <- tabela[tabela[, "Freq"]>0 , ]
tabela_tratada <- tabela %>%
filter(Freq != 0)
tabela_filtrada <- tabela[tabela["Freq"] != 0]
tabela_filtrada
View(tabela_filtrada)
tabela_filtrada <- tabela[, tabela["Freq"] != 0, ]
View(bancoBR)
tabela <- bancoBR %>%
group_by(nivel_de_experiencia) %>%
summarise(
media = mean(renda_anual_usd),
mediana = median(renda_anual_usd),
desviopadrao = sd(renda_anual_usd),
minimo = min(renda_anual_usd),
maximo = max(renda_anual_usd),
n = n()
)
print(tabela)
View(tabela)
dados <- data.frame(nivel = bancoBR$nivel_de_experiencia,
salario = bancoBR$renda_anual_usd
)
tabela <- dados %>%
group_by(nivel) %>%
summarise(
media = mean(salario),
mediana = median(salario),
desviopadrao = sd(salario),
minimo = min(salario),
maximo = max(salario),
n = n()
)
print(tabela)
typeof(bancoBR$renda_anual_usd)
bancoBR$renda_anual_usd <- as.numeric(bancoBR$renda_anual_usd)
tabela <- bancoBR %>%
group_by(nivel_de_experiencia) %>%
summarise(
media = mean(renda_anual_usd),
mediana = median(renda_anual_usd),
desviopadrao = sd(renda_anual_usd),
minimo = min(renda_anual_usd),
maximo = max(renda_anual_usd),
n = n()
)
View(tabela)
renda_anual_usd)
tabela <- bancoBR %>%
group_by(nivel_de_experiencia) %>%
summarise(
media = mean(renda_anual_usd, na.rm = TRUE),
mediana = median(renda_anual_usd, na.rm = TRUE),
desviopadrao = sd(renda_anual_usd, na.rm = TRUE),
minimo = min(renda_anual_usd, na.rm = TRUE),
maximo = max(renda_anual_usd, na.rm = TRUE),
n = n()
)
View(tabela)
print(tabela)
tabela <- bancoBR %>%
group_by(nivel_de_experiencia) %>%
summarise(
media = mean(renda_anual_usd, na.rm = TRUE),
mediana = median(renda_anual_usd, na.rm = TRUE),
desvio_padrao = sd(renda_anual_usd, na.rm = TRUE),
minimo = min(renda_anual_usd, na.rm = TRUE),
maximo = max(renda_anual_usd, na.rm = TRUE),
n = n()
)
print(tabela)
# Analise 4 - Tabela bivariada --> medidas resumo do salário por nível
tabela04 <- bancoBR %>%
group_by(nivel_de_experiencia) %>%
summarise(
media = mean(renda_anual_usd, na.rm = TRUE),
mediana = median(renda_anual_usd, na.rm = TRUE),
desvio_padrao = sd(renda_anual_usd, na.rm = TRUE),
minimo = min(renda_anual_usd, na.rm = TRUE),
maximo = max(renda_anual_usd, na.rm = TRUE),
n = n()
)
View(tabela04)
View(bancoGringo)
# Análise 5 - Tabela bivariada --> medidas resumo do salário por nível (banco gringo)
tabela05 <-bancoGringo %>%
group_by(nivel_de_experiencia) %>%
summarise(
media = mean(salario_usdt, na.rm = TRUE),
mediana = median(salario_usdt, na.rm = TRUE),
desvio_padrao = sd(salario_usdt, na.rm = TRUE),
minimo = min(salario_usdt, na.rm = TRUE),
maximo = max(salario_usdt, na.rm = TRUE),
n = n()
)
View(tabela05)
View(tabela04)
grafico_01 <- ggplot(data = bancoGringo, mapping = aes(x = nivel_de_experiencia, y = salario_usdt)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Distribuição de salários por nível de experiência no exterior",
x = "Níveis de experiência",
y = "Salário anual ($)") +
theme_bw()
# Análise 2 - salários por nível de experiência -- banco BR
grafico_02 <- ggplot(data = bancoBR, mapping = aes(x = nivel_de_experiencia, y = renda_anual_usd))+
geom_boxplot(fill = "blue") +
labs(title = "Distribuição de salários por nível de experiência no Brasil",
x = "Níveis de experiências",
y = "Salário anual ($)") +
theme_bw()
#Visualização das análises 1 e 2 -- Gráficos lado a lado
par(mfrow = c(1, 2))
plot(1:10, rnorm(10), main = "grafico_01")
plot(1:10, rnorm(10, 5), main = "grafico_02")
par(mfrow = c(1, 1))
grafico_01 <- ggplot(data = bancoGringo, mapping = aes(x = nivel_de_experiencia, y = salario_usdt)) +
geom_boxplot(fill = "darkgreen") +
labs(title = "Distribuição de salários por nível de experiência no exterior",
x = "Níveis de experiência",
y = "Salário anual ($)") +
theme_bw()
grafico_02 <- ggplot(data = bancoBR, mapping = aes(x = nivel_de_experiencia, y = renda_anual_usd))+
geom_boxplot(fill = "blue") +
labs(title = "Distribuição de salários por nível de experiência no Brasil",
x = "Níveis de experiências",
y = "Salário anual ($)") +
theme_bw()
#Visualização das análises 1 e 2 -- Gráficos lado a lado
par(mfrow = c(1, 2))
plot(1:10, rnorm(10), main = "grafico_01")
plot(1:10, rnorm(10, 5), main = "grafico_02")
par(mfrow = c(1, 1))
View(bancoBR)
Salário (banco BR)
tabela06 <- bancoBR %>%
group_by(cargo)%>%
summarise(
media_salarial = mean(renda_anual_usd)
)
View(tabela06)
# Análise 6 - Tabela bivariada --> Cargo X Salário (banco BR)
tabela06 <- bancoBR %>%
group_by(cargo)%>%
summarise(
media_salarial = mean(renda_anual_usd, na.rm = TRUE)
)
View(bancoGringo)
# Análise 7 - Tabela bivariada --> Cargo X Salário (banco gringo)
tabela07 <- bancoGringo %>%
group_by(cargo) %>%
summarise(
media_salarial = mean(salario_usdt, na.rm = TRUE)
)
View(tabela07)
grafico_08 <- ggplot(data = bancoGringo, mapping = aes(x = tamanho_da_empresa , y = mean(renda_anual_usd)))+
geom_boxplot(fill = "blue") +
labs(title = "Salários médios para cada tamanho de empresa",
x = "Tamanho da empresa",
y = "Salário anual mpedio ($)") +
theme_bw()
print(grafico_08)
# Análise 8 - Salários médios por tamanho da empresa (banco Gringo)
grafico_08 <- ggplot(data = bancoGringo, mapping = aes(x = tamanho_da_empresa , y = salario_usdt ))+
geom_boxplot(fill = "blue") +
labs(title = "Salários médios para cada tamanho de empresa",
x = "Tamanho da empresa",
y = "Salário anual mpedio ($)") +
theme_bw()
print(grafico_08)
bancoGringo$tamanho_da_empresa <- factor(bancoGringo$tamanho_da_empresa,
levels = c("Small", "Medium", "Large")) #Organiza os níveis dos tamanhos das empresas
grafico_08 <- ggplot(data = bancoGringo, mapping = aes(x = tamanho_da_empresa , y = salario_usdt ))+
geom_boxplot(fill = "blue") +
labs(title = "Salários médios para cada tamanho de empresa",
x = "Tamanho da empresa",
y = "Salário anual médio ($)") +
theme_bw()
# Análise 8 - Salários médios por tamanho da empresa (banco Gringo)
bancoGringo$tamanho_da_empresa <- factor(bancoGringo$tamanho_da_empresa,
levels = c("Small", "Medium", "Large")) #Organiza os níveis dos tamanhos das empresas
grafico_08 <- ggplot(data = bancoGringo, mapping = aes(x = tamanho_da_empresa , y = salario_usdt ))+
geom_boxplot(fill = "darkred") +
labs(title = "Salários médios para cada tamanho de empresa",
x = "Tamanho da empresa",
y = "Salário anual médio ($)") +
theme_bw()
print(grafico_08)
